
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000009dc  00000a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000008c  00800068  00800068  00000a78  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000cb  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000358  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001fc  00000000  00000000  00000ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000586  00000000  00000000  000010b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000135  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000343  00000000  00000000  00001815  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a8 e6       	ldi	r26, 0x68	; 104
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 3f       	cpi	r26, 0xF4	; 244
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ec ed       	ldi	r30, 0xDC	; 220
  78:	f9 e0       	ldi	r31, 0x09	; 9
  7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
  86:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  8a:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <changeDirection>:
    }
	pixels[food] = 65;
}

void changeDirection(int* dir, char newDir)
{
  92:	fc 01       	movw	r30, r24
    if(newDir == 'u' && *dir != 1)
  94:	65 37       	cpi	r22, 0x75	; 117
  96:	39 f4       	brne	.+14     	; 0xa6 <changeDirection+0x14>
  98:	80 81       	ld	r24, Z
  9a:	91 81       	ldd	r25, Z+1	; 0x01
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f9 f0       	breq	.+62     	; 0xde <changeDirection+0x4c>
    {
        *dir = 3;
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	11 c0       	rjmp	.+34     	; 0xc8 <changeDirection+0x36>
    }
    else if(newDir == 'd' && *dir != 3)
  a6:	64 36       	cpi	r22, 0x64	; 100
  a8:	39 f4       	brne	.+14     	; 0xb8 <changeDirection+0x26>
  aa:	80 81       	ld	r24, Z
  ac:	91 81       	ldd	r25, Z+1	; 0x01
  ae:	03 97       	sbiw	r24, 0x03	; 3
  b0:	b1 f0       	breq	.+44     	; 0xde <changeDirection+0x4c>
    {
        *dir = 1;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <changeDirection+0x36>
    }
    else if(newDir == 'l' && *dir != 0)
  b8:	6c 36       	cpi	r22, 0x6C	; 108
  ba:	49 f4       	brne	.+18     	; 0xce <changeDirection+0x3c>
  bc:	80 81       	ld	r24, Z
  be:	91 81       	ldd	r25, Z+1	; 0x01
  c0:	89 2b       	or	r24, r25
  c2:	69 f0       	breq	.+26     	; 0xde <changeDirection+0x4c>
    {
        *dir = 2;
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	91 83       	std	Z+1, r25	; 0x01
  ca:	80 83       	st	Z, r24
  cc:	08 95       	ret
    }
    else if(newDir == 'r' && *dir != 2)
  ce:	62 37       	cpi	r22, 0x72	; 114
  d0:	31 f4       	brne	.+12     	; 0xde <changeDirection+0x4c>
  d2:	80 81       	ld	r24, Z
  d4:	91 81       	ldd	r25, Z+1	; 0x01
  d6:	02 97       	sbiw	r24, 0x02	; 2
  d8:	11 f0       	breq	.+4      	; 0xde <changeDirection+0x4c>
    {
        *dir = 0;
  da:	11 82       	std	Z+1, r1	; 0x01
  dc:	10 82       	st	Z, r1
  de:	08 95       	ret

000000e0 <ledMatrix>:
    }
}

void ledMatrix(int i, int j)
{
  e0:	9c 01       	movw	r18, r24
	PORTC = 0b00000000;
  e2:	15 ba       	out	0x15, r1	; 21
	PORTD = 0b00000000;
  e4:	12 ba       	out	0x12, r1	; 18
	PORTB = 0b00000000;
  e6:	18 ba       	out	0x18, r1	; 24
	if(i == 6)
  e8:	86 30       	cpi	r24, 0x06	; 6
  ea:	91 05       	cpc	r25, r1
  ec:	e9 f4       	brne	.+58     	; 0x128 <ledMatrix+0x48>
	{
		if(j == 6)
  ee:	66 30       	cpi	r22, 0x06	; 6
  f0:	71 05       	cpc	r23, r1
  f2:	11 f4       	brne	.+4      	; 0xf8 <ledMatrix+0x18>
		{
			PORTB = 0b10100000;
  f4:	80 ea       	ldi	r24, 0xA0	; 160
  f6:	04 c0       	rjmp	.+8      	; 0x100 <ledMatrix+0x20>
			PORTC = 0b11111111;
			PORTD = 0b00000000;
		}
		else if(j == 7)
  f8:	67 30       	cpi	r22, 0x07	; 7
  fa:	71 05       	cpc	r23, r1
  fc:	31 f4       	brne	.+12     	; 0x10a <ledMatrix+0x2a>
		{
			PORTB = 0b11000000;
  fe:	80 ec       	ldi	r24, 0xC0	; 192
 100:	88 bb       	out	0x18, r24	; 24
			PORTC = 0b11111111;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	85 bb       	out	0x15, r24	; 21
			PORTD = 0b00000000;
 106:	12 ba       	out	0x12, r1	; 18
 108:	08 95       	ret
		}
		else
		{
			PORTB = 0b11100000;
 10a:	80 ee       	ldi	r24, 0xE0	; 224
 10c:	88 bb       	out	0x18, r24	; 24
			PORTC = (1 << (j - 1)) ^ (0b11111111);
 10e:	61 50       	subi	r22, 0x01	; 1
 110:	70 40       	sbci	r23, 0x00	; 0
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <ledMatrix+0x3c>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <ledMatrix+0x38>
 120:	80 95       	com	r24
 122:	85 bb       	out	0x15, r24	; 21
			PORTD = (1 << (i - 1));
 124:	80 e2       	ldi	r24, 0x20	; 32
 126:	22 c0       	rjmp	.+68     	; 0x16c <ledMatrix+0x8c>
		}
	}
	else if(j == 6)
 128:	66 30       	cpi	r22, 0x06	; 6
 12a:	71 05       	cpc	r23, r1
 12c:	71 f4       	brne	.+28     	; 0x14a <ledMatrix+0x6a>
	{
		PORTB = 0b00100000;
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	88 bb       	out	0x18, r24	; 24
		PORTC = (1 << (j - 1)) ^ (0b11111111);
 132:	8f ed       	ldi	r24, 0xDF	; 223
 134:	85 bb       	out	0x15, r24	; 21
		PORTD = (1 << (i - 1));
 136:	21 50       	subi	r18, 0x01	; 1
 138:	30 40       	sbci	r19, 0x00	; 0
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <ledMatrix+0x64>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	2a 95       	dec	r18
 146:	e2 f7       	brpl	.-8      	; 0x140 <ledMatrix+0x60>
 148:	11 c0       	rjmp	.+34     	; 0x16c <ledMatrix+0x8c>
 14a:	ac 01       	movw	r20, r24
 14c:	41 50       	subi	r20, 0x01	; 1
 14e:	50 40       	sbci	r21, 0x00	; 0
	}
	else if(j == 7)
 150:	67 30       	cpi	r22, 0x07	; 7
 152:	71 05       	cpc	r23, r1
 154:	69 f4       	brne	.+26     	; 0x170 <ledMatrix+0x90>
	{
		PORTB = 0b01000000;
 156:	80 e4       	ldi	r24, 0x40	; 64
 158:	88 bb       	out	0x18, r24	; 24
		PORTC = (1 << (j - 1)) ^ (0b11111111);
 15a:	8f eb       	ldi	r24, 0xBF	; 191
 15c:	85 bb       	out	0x15, r24	; 21
		PORTD = (1 << (i - 1));
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <ledMatrix+0x88>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	4a 95       	dec	r20
 16a:	e2 f7       	brpl	.-8      	; 0x164 <ledMatrix+0x84>
 16c:	82 bb       	out	0x12, r24	; 18
 16e:	08 95       	ret
	}
	else
	{
		PORTB = 0b01100000;
 170:	80 e6       	ldi	r24, 0x60	; 96
 172:	88 bb       	out	0x18, r24	; 24
		PORTC = (1 << (j - 1)) ^ (0b11111111);
 174:	61 50       	subi	r22, 0x01	; 1
 176:	70 40       	sbci	r23, 0x00	; 0
 178:	21 e0       	ldi	r18, 0x01	; 1
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	c9 01       	movw	r24, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <ledMatrix+0xa4>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <ledMatrix+0xa0>
 188:	80 95       	com	r24
 18a:	85 bb       	out	0x15, r24	; 21
		PORTD = (1 << (i - 1));
 18c:	02 c0       	rjmp	.+4      	; 0x192 <ledMatrix+0xb2>
 18e:	22 0f       	add	r18, r18
 190:	33 1f       	adc	r19, r19
 192:	4a 95       	dec	r20
 194:	e2 f7       	brpl	.-8      	; 0x18e <ledMatrix+0xae>
 196:	22 bb       	out	0x12, r18	; 18
 198:	08 95       	ret

0000019a <POV>:
	}
}

void POV(int data[])
{
 19a:	ef 92       	push	r14
 19c:	ff 92       	push	r15
 19e:	0f 93       	push	r16
 1a0:	1f 93       	push	r17
 1a2:	cf 93       	push	r28
 1a4:	df 93       	push	r29
 1a6:	8c 01       	movw	r16, r24
 1a8:	c0 e0       	ldi	r28, 0x00	; 0
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ac:	30 ed       	ldi	r19, 0xD0	; 208
 1ae:	e3 2e       	mov	r14, r19
 1b0:	37 e0       	ldi	r19, 0x07	; 7
 1b2:	f3 2e       	mov	r15, r19
	for(int i = 0; i < 64; i++)
	{
		if(data[i] != -1)
 1b4:	f8 01       	movw	r30, r16
 1b6:	80 81       	ld	r24, Z
 1b8:	91 81       	ldd	r25, Z+1	; 0x01
 1ba:	8f 5f       	subi	r24, 0xFF	; 255
 1bc:	9f 4f       	sbci	r25, 0xFF	; 255
 1be:	89 f0       	breq	.+34     	; 0x1e2 <POV+0x48>
		{
			ledMatrix((i/8) + 1, (i%8) + 1);
 1c0:	ce 01       	movw	r24, r28
 1c2:	23 e0       	ldi	r18, 0x03	; 3
 1c4:	95 95       	asr	r25
 1c6:	87 95       	ror	r24
 1c8:	2a 95       	dec	r18
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <POV+0x2a>
 1cc:	be 01       	movw	r22, r28
 1ce:	67 70       	andi	r22, 0x07	; 7
 1d0:	70 70       	andi	r23, 0x00	; 0
 1d2:	6f 5f       	subi	r22, 0xFF	; 255
 1d4:	7f 4f       	sbci	r23, 0xFF	; 255
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	0e 94 70 00 	call	0xe0	; 0xe0 <ledMatrix>
 1dc:	c7 01       	movw	r24, r14
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <POV+0x44>
	}
}

void POV(int data[])
{
	for(int i = 0; i < 64; i++)
 1e2:	21 96       	adiw	r28, 0x01	; 1
 1e4:	0e 5f       	subi	r16, 0xFE	; 254
 1e6:	1f 4f       	sbci	r17, 0xFF	; 255
 1e8:	c0 34       	cpi	r28, 0x40	; 64
 1ea:	d1 05       	cpc	r29, r1
 1ec:	19 f7       	brne	.-58     	; 0x1b4 <POV+0x1a>
		{
			ledMatrix((i/8) + 1, (i%8) + 1);
			_delay_ms(1);
		}
	}
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	ff 90       	pop	r15
 1f8:	ef 90       	pop	r14
 1fa:	08 95       	ret

000001fc <adc_init>:

void adc_init()
{
	ADMUX = (1<<REFS0);
 1fc:	80 e4       	ldi	r24, 0x40	; 64
 1fe:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 200:	87 e8       	ldi	r24, 0x87	; 135
 202:	86 b9       	out	0x06, r24	; 6
}
 204:	08 95       	ret

00000206 <adc_read>:

uint16_t adc_read(uint8_t ch)
{
	ch &= 0b00000111;
	ADMUX = (ADMUX & 0xF8)|ch;
 206:	97 b1       	in	r25, 0x07	; 7
 208:	87 70       	andi	r24, 0x07	; 7
 20a:	98 7f       	andi	r25, 0xF8	; 248
 20c:	89 2b       	or	r24, r25
 20e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
 210:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
 212:	36 99       	sbic	0x06, 6	; 6
 214:	fe cf       	rjmp	.-4      	; 0x212 <adc_read+0xc>
	
	return (ADC);
 216:	24 b1       	in	r18, 0x04	; 4
 218:	35 b1       	in	r19, 0x05	; 5
}
 21a:	c9 01       	movw	r24, r18
 21c:	08 95       	ret

0000021e <randomNum>:

int randomNum()
{
	return rand() % 64;
 21e:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <rand>
 222:	60 e4       	ldi	r22, 0x40	; 64
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__divmodhi4>
}
 22a:	08 95       	ret

0000022c <main>:

void main()
{
	DDRD = 0b11111111;
 22c:	8f ef       	ldi	r24, 0xFF	; 255
 22e:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b11111111;
 230:	84 bb       	out	0x14, r24	; 20
	DDRB = 0b11111111;
 232:	87 bb       	out	0x17, r24	; 23
	}
}

void adc_init()
{
	ADMUX = (1<<REFS0);
 234:	80 e4       	ldi	r24, 0x40	; 64
 236:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 238:	87 e8       	ldi	r24, 0x87	; 135
 23a:	86 b9       	out	0x06, r24	; 6
{
	DDRD = 0b11111111;
	DDRC = 0b11111111;
	DDRB = 0b11111111;
	adc_init();
	srand(2);
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 ed 03 	call	0x7da	; 0x7da <srand>
 244:	ee e6       	ldi	r30, 0x6E	; 110
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
        {
            snake[i] = 64;
        }
        else
        {
            snake[i] = -1;
 24c:	4f ef       	ldi	r20, 0xFF	; 255
 24e:	5f ef       	ldi	r21, 0xFF	; 255
        {
            snake[i] = i + 1;
        }
        else if(i == 2)
        {
            snake[i] = 64;
 250:	20 e4       	ldi	r18, 0x40	; 64
 252:	30 e0       	ldi	r19, 0x00	; 0
	adc_init();
	srand(2);
	
    for(int i = 0; i < 64; i++)
    {
        if(i < 2)
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	91 05       	cpc	r25, r1
 258:	2c f4       	brge	.+10     	; 0x264 <main+0x38>
        {
            snake[i] = i + 1;
 25a:	01 96       	adiw	r24, 0x01	; 1
 25c:	91 83       	std	Z+1, r25	; 0x01
 25e:	80 83       	st	Z, r24
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	0a c0       	rjmp	.+20     	; 0x278 <main+0x4c>
        }
        else if(i == 2)
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	91 05       	cpc	r25, r1
 268:	29 f4       	brne	.+10     	; 0x274 <main+0x48>
        {
            snake[i] = 64;
 26a:	30 93 73 00 	sts	0x0073, r19
 26e:	20 93 72 00 	sts	0x0072, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <main+0x4c>
        }
        else
        {
            snake[i] = -1;
 274:	51 83       	std	Z+1, r21	; 0x01
 276:	40 83       	st	Z, r20
	DDRC = 0b11111111;
	DDRB = 0b11111111;
	adc_init();
	srand(2);
	
    for(int i = 0; i < 64; i++)
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	32 96       	adiw	r30, 0x02	; 2
 27c:	80 34       	cpi	r24, 0x40	; 64
 27e:	91 05       	cpc	r25, r1
 280:	49 f7       	brne	.-46     	; 0x254 <main+0x28>
        {
            snake[i] = -1;
        }
	}
	
	direction = 1;
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	90 93 ef 00 	sts	0x00EF, r25
 28a:	80 93 ee 00 	sts	0x00EE, r24
    head = 2;
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	90 93 f3 00 	sts	0x00F3, r25
 296:	80 93 f2 00 	sts	0x00F2, r24
    tail = 0;
 29a:	10 92 f1 00 	sts	0x00F1, r1
 29e:	10 92 f0 00 	sts	0x00F0, r1
	food = randomNum();
	while(snake[food] != -1)
	{
		food = randomNum();
 2a2:	0e 94 0f 01 	call	0x21e	; 0x21e <randomNum>
 2a6:	90 93 6d 00 	sts	0x006D, r25
 2aa:	80 93 6c 00 	sts	0x006C, r24
	
	direction = 1;
    head = 2;
    tail = 0;
	food = randomNum();
	while(snake[food] != -1)
 2ae:	e0 91 6c 00 	lds	r30, 0x006C
 2b2:	f0 91 6d 00 	lds	r31, 0x006D
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	e2 59       	subi	r30, 0x92	; 146
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	80 81       	ld	r24, Z
 2c0:	91 81       	ldd	r25, Z+1	; 0x01
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	9f 4f       	sbci	r25, 0xFF	; 255
 2c6:	69 f7       	brne	.-38     	; 0x2a2 <main+0x76>
	{
		food = randomNum();
	}
	snake[food] = 65;
 2c8:	81 e4       	ldi	r24, 0x41	; 65
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	91 83       	std	Z+1, r25	; 0x01
 2ce:	80 83       	st	Z, r24
	
	while(1)
	{
		TCCR0 |= (1<<CS00);
 2d0:	83 b7       	in	r24, 0x33	; 51
 2d2:	81 60       	ori	r24, 0x01	; 1
 2d4:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~(1<<CS01);
 2d6:	83 b7       	in	r24, 0x33	; 51
 2d8:	8d 7f       	andi	r24, 0xFD	; 253
 2da:	83 bf       	out	0x33, r24	; 51
		TCCR0 &= ~(1<<CS02);
 2dc:	83 b7       	in	r24, 0x33	; 51
 2de:	8b 7f       	andi	r24, 0xFB	; 251
 2e0:	83 bf       	out	0x33, r24	; 51
		sei();
 2e2:	78 94       	sei
		TIMSK |= (1<<TOIE0);
 2e4:	89 b7       	in	r24, 0x39	; 57
 2e6:	81 60       	ori	r24, 0x01	; 1
 2e8:	89 bf       	out	0x39, r24	; 57
		TCNT0 = 0;
 2ea:	12 be       	out	0x32, r1	; 50
		
		POV(snake);
 2ec:	8e e6       	ldi	r24, 0x6E	; 110
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	0e 94 cd 00 	call	0x19a	; 0x19a <POV>
 2f4:	ed cf       	rjmp	.-38     	; 0x2d0 <main+0xa4>

000002f6 <move>:
int tail;
int food;
int end = 0;

void move(int pixels[], int dir, int* h, int* t)
{
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
 2fe:	cf 93       	push	r28
 300:	df 93       	push	r29
 302:	8c 01       	movw	r16, r24
 304:	ea 01       	movw	r28, r20
 306:	79 01       	movw	r14, r18
    int tempTail;
	int newFood = 0;
    if(dir == 0)
 308:	61 15       	cp	r22, r1
 30a:	71 05       	cpc	r23, r1
 30c:	09 f0       	breq	.+2      	; 0x310 <move+0x1a>
 30e:	52 c0       	rjmp	.+164    	; 0x3b4 <move+0xbe>
    {
        if(((*h) + 1) % 8)
 310:	e8 81       	ld	r30, Y
 312:	f9 81       	ldd	r31, Y+1	; 0x01
 314:	9f 01       	movw	r18, r30
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	c9 01       	movw	r24, r18
 31c:	87 70       	andi	r24, 0x07	; 7
 31e:	90 70       	andi	r25, 0x00	; 0
 320:	89 2b       	or	r24, r25
 322:	09 f4       	brne	.+2      	; 0x326 <move+0x30>
 324:	46 c0       	rjmp	.+140    	; 0x3b2 <move+0xbc>
        {
            pixels[*h] = (*h) + 1;
 326:	ee 0f       	add	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	e0 0f       	add	r30, r16
 32c:	f1 1f       	adc	r31, r17
 32e:	31 83       	std	Z+1, r19	; 0x01
 330:	20 83       	st	Z, r18
			if(pixels[(*h) + 1] == 65)
 332:	e8 81       	ld	r30, Y
 334:	f9 81       	ldd	r31, Y+1	; 0x01
 336:	31 96       	adiw	r30, 0x01	; 1
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	e0 0f       	add	r30, r16
 33e:	f1 1f       	adc	r31, r17
 340:	01 90       	ld	r0, Z+
 342:	f0 81       	ld	r31, Z
 344:	e0 2d       	mov	r30, r0
 346:	e1 34       	cpi	r30, 0x41	; 65
 348:	f1 05       	cpc	r31, r1
 34a:	d9 f4       	brne	.+54     	; 0x382 <move+0x8c>
			{
				food = randomNum();
 34c:	0e 94 0f 01 	call	0x21e	; 0x21e <randomNum>
 350:	90 93 6d 00 	sts	0x006D, r25
 354:	80 93 6c 00 	sts	0x006C, r24
 358:	06 c0       	rjmp	.+12     	; 0x366 <move+0x70>
				while(pixels[food] != -1)
				{
					food = random();
 35a:	0e 94 4b 04 	call	0x896	; 0x896 <random>
 35e:	70 93 6d 00 	sts	0x006D, r23
 362:	60 93 6c 00 	sts	0x006C, r22
        {
            pixels[*h] = (*h) + 1;
			if(pixels[(*h) + 1] == 65)
			{
				food = randomNum();
				while(pixels[food] != -1)
 366:	e0 91 6c 00 	lds	r30, 0x006C
 36a:	f0 91 6d 00 	lds	r31, 0x006D
 36e:	ee 0f       	add	r30, r30
 370:	ff 1f       	adc	r31, r31
 372:	e0 0f       	add	r30, r16
 374:	f1 1f       	adc	r31, r17
 376:	80 81       	ld	r24, Z
 378:	91 81       	ldd	r25, Z+1	; 0x01
 37a:	8f 5f       	subi	r24, 0xFF	; 255
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	69 f7       	brne	.-38     	; 0x35a <move+0x64>
 380:	07 c0       	rjmp	.+14     	; 0x390 <move+0x9a>
				{
					food = random();
				}
				newFood = 1;
			}
			else if(pixels[(*h) + 1] != -1)
 382:	ef 5f       	subi	r30, 0xFF	; 255
 384:	ff 4f       	sbci	r31, 0xFF	; 255
 386:	19 f4       	brne	.+6      	; 0x38e <move+0x98>
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	03 c0       	rjmp	.+6      	; 0x394 <move+0x9e>
 38e:	ff cf       	rjmp	.-2      	; 0x38e <move+0x98>
			{
				end = 1;
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
				while(1)
				{
					
				}
			}
            pixels[(*h) + 1] = 64;
 394:	e8 81       	ld	r30, Y
 396:	f9 81       	ldd	r31, Y+1	; 0x01
 398:	31 96       	adiw	r30, 0x01	; 1
 39a:	ee 0f       	add	r30, r30
 39c:	ff 1f       	adc	r31, r31
 39e:	e0 0f       	add	r30, r16
 3a0:	f1 1f       	adc	r31, r17
 3a2:	80 e4       	ldi	r24, 0x40	; 64
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	91 83       	std	Z+1, r25	; 0x01
 3a8:	80 83       	st	Z, r24

            *h = (*h) + 1;
 3aa:	88 81       	ld	r24, Y
 3ac:	99 81       	ldd	r25, Y+1	; 0x01
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	f5 c0       	rjmp	.+490    	; 0x59c <move+0x2a6>
 3b2:	ff cf       	rjmp	.-2      	; 0x3b2 <move+0xbc>
			{
				
			}
		}
    }
    else if(dir == 1)
 3b4:	61 30       	cpi	r22, 0x01	; 1
 3b6:	71 05       	cpc	r23, r1
 3b8:	09 f0       	breq	.+2      	; 0x3bc <move+0xc6>
 3ba:	4f c0       	rjmp	.+158    	; 0x45a <move+0x164>
    {
        if(*h < 56)
 3bc:	88 81       	ld	r24, Y
 3be:	99 81       	ldd	r25, Y+1	; 0x01
 3c0:	88 33       	cpi	r24, 0x38	; 56
 3c2:	91 05       	cpc	r25, r1
 3c4:	0c f0       	brlt	.+2      	; 0x3c8 <move+0xd2>
 3c6:	48 c0       	rjmp	.+144    	; 0x458 <move+0x162>
        {
            pixels[*h] = (*h) + 8;
 3c8:	fc 01       	movw	r30, r24
 3ca:	ee 0f       	add	r30, r30
 3cc:	ff 1f       	adc	r31, r31
 3ce:	e0 0f       	add	r30, r16
 3d0:	f1 1f       	adc	r31, r17
 3d2:	08 96       	adiw	r24, 0x08	; 8
 3d4:	91 83       	std	Z+1, r25	; 0x01
 3d6:	80 83       	st	Z, r24
			if(pixels[(*h) + 8] == 65)
 3d8:	e8 81       	ld	r30, Y
 3da:	f9 81       	ldd	r31, Y+1	; 0x01
 3dc:	38 96       	adiw	r30, 0x08	; 8
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	e0 0f       	add	r30, r16
 3e4:	f1 1f       	adc	r31, r17
 3e6:	01 90       	ld	r0, Z+
 3e8:	f0 81       	ld	r31, Z
 3ea:	e0 2d       	mov	r30, r0
 3ec:	e1 34       	cpi	r30, 0x41	; 65
 3ee:	f1 05       	cpc	r31, r1
 3f0:	d9 f4       	brne	.+54     	; 0x428 <move+0x132>
			{
				food = randomNum();
 3f2:	0e 94 0f 01 	call	0x21e	; 0x21e <randomNum>
 3f6:	90 93 6d 00 	sts	0x006D, r25
 3fa:	80 93 6c 00 	sts	0x006C, r24
 3fe:	06 c0       	rjmp	.+12     	; 0x40c <move+0x116>
				while(pixels[food] != -1)
				{
					food = random();
 400:	0e 94 4b 04 	call	0x896	; 0x896 <random>
 404:	70 93 6d 00 	sts	0x006D, r23
 408:	60 93 6c 00 	sts	0x006C, r22
        {
            pixels[*h] = (*h) + 8;
			if(pixels[(*h) + 8] == 65)
			{
				food = randomNum();
				while(pixels[food] != -1)
 40c:	e0 91 6c 00 	lds	r30, 0x006C
 410:	f0 91 6d 00 	lds	r31, 0x006D
 414:	ee 0f       	add	r30, r30
 416:	ff 1f       	adc	r31, r31
 418:	e0 0f       	add	r30, r16
 41a:	f1 1f       	adc	r31, r17
 41c:	80 81       	ld	r24, Z
 41e:	91 81       	ldd	r25, Z+1	; 0x01
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	69 f7       	brne	.-38     	; 0x400 <move+0x10a>
 426:	07 c0       	rjmp	.+14     	; 0x436 <move+0x140>
				{
					food = random();
				}
				newFood = 1;
			}
			else if(pixels[(*h) + 8] != -1)
 428:	ef 5f       	subi	r30, 0xFF	; 255
 42a:	ff 4f       	sbci	r31, 0xFF	; 255
 42c:	19 f4       	brne	.+6      	; 0x434 <move+0x13e>
 42e:	20 e0       	ldi	r18, 0x00	; 0
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	03 c0       	rjmp	.+6      	; 0x43a <move+0x144>
 434:	ff cf       	rjmp	.-2      	; 0x434 <move+0x13e>
			{
				end = 1;
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
				while(1)
				{
					
				}
			}
            pixels[(*h) + 8] = 64;
 43a:	e8 81       	ld	r30, Y
 43c:	f9 81       	ldd	r31, Y+1	; 0x01
 43e:	38 96       	adiw	r30, 0x08	; 8
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	e0 0f       	add	r30, r16
 446:	f1 1f       	adc	r31, r17
 448:	80 e4       	ldi	r24, 0x40	; 64
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	91 83       	std	Z+1, r25	; 0x01
 44e:	80 83       	st	Z, r24
            
            *h = (*h) + 8;
 450:	88 81       	ld	r24, Y
 452:	99 81       	ldd	r25, Y+1	; 0x01
 454:	08 96       	adiw	r24, 0x08	; 8
 456:	a2 c0       	rjmp	.+324    	; 0x59c <move+0x2a6>
 458:	ff cf       	rjmp	.-2      	; 0x458 <move+0x162>
			{
				
			}
		}
    }
    else if(dir == 2)
 45a:	62 30       	cpi	r22, 0x02	; 2
 45c:	71 05       	cpc	r23, r1
 45e:	09 f0       	breq	.+2      	; 0x462 <move+0x16c>
 460:	52 c0       	rjmp	.+164    	; 0x506 <move+0x210>
    {
        if((*h) % 8)
 462:	28 81       	ld	r18, Y
 464:	39 81       	ldd	r19, Y+1	; 0x01
 466:	c9 01       	movw	r24, r18
 468:	87 70       	andi	r24, 0x07	; 7
 46a:	90 70       	andi	r25, 0x00	; 0
 46c:	89 2b       	or	r24, r25
 46e:	09 f4       	brne	.+2      	; 0x472 <move+0x17c>
 470:	49 c0       	rjmp	.+146    	; 0x504 <move+0x20e>
        {
            pixels[*h] = (*h) - 1;
 472:	f9 01       	movw	r30, r18
 474:	ee 0f       	add	r30, r30
 476:	ff 1f       	adc	r31, r31
 478:	e0 0f       	add	r30, r16
 47a:	f1 1f       	adc	r31, r17
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	30 40       	sbci	r19, 0x00	; 0
 480:	31 83       	std	Z+1, r19	; 0x01
 482:	20 83       	st	Z, r18
			if(pixels[(*h) - 1] == 65)
 484:	e8 81       	ld	r30, Y
 486:	f9 81       	ldd	r31, Y+1	; 0x01
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	ee 0f       	add	r30, r30
 48c:	ff 1f       	adc	r31, r31
 48e:	e0 0f       	add	r30, r16
 490:	f1 1f       	adc	r31, r17
 492:	01 90       	ld	r0, Z+
 494:	f0 81       	ld	r31, Z
 496:	e0 2d       	mov	r30, r0
 498:	e1 34       	cpi	r30, 0x41	; 65
 49a:	f1 05       	cpc	r31, r1
 49c:	d9 f4       	brne	.+54     	; 0x4d4 <move+0x1de>
			{
				food = randomNum();
 49e:	0e 94 0f 01 	call	0x21e	; 0x21e <randomNum>
 4a2:	90 93 6d 00 	sts	0x006D, r25
 4a6:	80 93 6c 00 	sts	0x006C, r24
 4aa:	06 c0       	rjmp	.+12     	; 0x4b8 <move+0x1c2>
				while(pixels[food] != -1)
				{
					food = random();
 4ac:	0e 94 4b 04 	call	0x896	; 0x896 <random>
 4b0:	70 93 6d 00 	sts	0x006D, r23
 4b4:	60 93 6c 00 	sts	0x006C, r22
        {
            pixels[*h] = (*h) - 1;
			if(pixels[(*h) - 1] == 65)
			{
				food = randomNum();
				while(pixels[food] != -1)
 4b8:	e0 91 6c 00 	lds	r30, 0x006C
 4bc:	f0 91 6d 00 	lds	r31, 0x006D
 4c0:	ee 0f       	add	r30, r30
 4c2:	ff 1f       	adc	r31, r31
 4c4:	e0 0f       	add	r30, r16
 4c6:	f1 1f       	adc	r31, r17
 4c8:	80 81       	ld	r24, Z
 4ca:	91 81       	ldd	r25, Z+1	; 0x01
 4cc:	8f 5f       	subi	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	69 f7       	brne	.-38     	; 0x4ac <move+0x1b6>
 4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <move+0x1ec>
				{
					food = random();
				}
				newFood = 1;
			}
			else if(pixels[(*h) - 1] != -1)
 4d4:	ef 5f       	subi	r30, 0xFF	; 255
 4d6:	ff 4f       	sbci	r31, 0xFF	; 255
 4d8:	19 f4       	brne	.+6      	; 0x4e0 <move+0x1ea>
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	03 c0       	rjmp	.+6      	; 0x4e6 <move+0x1f0>
 4e0:	ff cf       	rjmp	.-2      	; 0x4e0 <move+0x1ea>
			{
				end = 1;
 4e2:	21 e0       	ldi	r18, 0x01	; 1
 4e4:	30 e0       	ldi	r19, 0x00	; 0
				while(1)
				{
					
				}
			}
            pixels[(*h) - 1] = 64;
 4e6:	e8 81       	ld	r30, Y
 4e8:	f9 81       	ldd	r31, Y+1	; 0x01
 4ea:	31 97       	sbiw	r30, 0x01	; 1
 4ec:	ee 0f       	add	r30, r30
 4ee:	ff 1f       	adc	r31, r31
 4f0:	e0 0f       	add	r30, r16
 4f2:	f1 1f       	adc	r31, r17
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	91 83       	std	Z+1, r25	; 0x01
 4fa:	80 83       	st	Z, r24

            *h = (*h) - 1;
 4fc:	88 81       	ld	r24, Y
 4fe:	99 81       	ldd	r25, Y+1	; 0x01
 500:	01 97       	sbiw	r24, 0x01	; 1
 502:	4c c0       	rjmp	.+152    	; 0x59c <move+0x2a6>
 504:	ff cf       	rjmp	.-2      	; 0x504 <move+0x20e>
			{
				
			}
		}
    }
    else if(dir == 3)
 506:	63 30       	cpi	r22, 0x03	; 3
 508:	71 05       	cpc	r23, r1
 50a:	09 f0       	breq	.+2      	; 0x50e <move+0x218>
 50c:	5d c0       	rjmp	.+186    	; 0x5c8 <move+0x2d2>
    {
        if(*h > 7)
 50e:	88 81       	ld	r24, Y
 510:	99 81       	ldd	r25, Y+1	; 0x01
 512:	88 30       	cpi	r24, 0x08	; 8
 514:	91 05       	cpc	r25, r1
 516:	0c f4       	brge	.+2      	; 0x51a <move+0x224>
 518:	56 c0       	rjmp	.+172    	; 0x5c6 <move+0x2d0>
        {
            pixels[*h] = (*h) - 8;
 51a:	fc 01       	movw	r30, r24
 51c:	ee 0f       	add	r30, r30
 51e:	ff 1f       	adc	r31, r31
 520:	e0 0f       	add	r30, r16
 522:	f1 1f       	adc	r31, r17
 524:	08 97       	sbiw	r24, 0x08	; 8
 526:	91 83       	std	Z+1, r25	; 0x01
 528:	80 83       	st	Z, r24
			if(pixels[(*h) - 8] == 65)
 52a:	e8 81       	ld	r30, Y
 52c:	f9 81       	ldd	r31, Y+1	; 0x01
 52e:	38 97       	sbiw	r30, 0x08	; 8
 530:	ee 0f       	add	r30, r30
 532:	ff 1f       	adc	r31, r31
 534:	e0 0f       	add	r30, r16
 536:	f1 1f       	adc	r31, r17
 538:	80 81       	ld	r24, Z
 53a:	91 81       	ldd	r25, Z+1	; 0x01
 53c:	81 34       	cpi	r24, 0x41	; 65
 53e:	91 05       	cpc	r25, r1
 540:	19 f0       	breq	.+6      	; 0x548 <move+0x252>
 542:	20 e0       	ldi	r18, 0x00	; 0
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	1c c0       	rjmp	.+56     	; 0x580 <move+0x28a>
			{
				food = randomNum();
 548:	0e 94 0f 01 	call	0x21e	; 0x21e <randomNum>
 54c:	90 93 6d 00 	sts	0x006D, r25
 550:	80 93 6c 00 	sts	0x006C, r24
 554:	06 c0       	rjmp	.+12     	; 0x562 <move+0x26c>
				while(pixels[food] != -1)
				{
					food = random();
 556:	0e 94 4b 04 	call	0x896	; 0x896 <random>
 55a:	70 93 6d 00 	sts	0x006D, r23
 55e:	60 93 6c 00 	sts	0x006C, r22
        {
            pixels[*h] = (*h) - 8;
			if(pixels[(*h) - 8] == 65)
			{
				food = randomNum();
				while(pixels[food] != -1)
 562:	e0 91 6c 00 	lds	r30, 0x006C
 566:	f0 91 6d 00 	lds	r31, 0x006D
 56a:	ee 0f       	add	r30, r30
 56c:	ff 1f       	adc	r31, r31
 56e:	e0 0f       	add	r30, r16
 570:	f1 1f       	adc	r31, r17
 572:	80 81       	ld	r24, Z
 574:	91 81       	ldd	r25, Z+1	; 0x01
 576:	8f 5f       	subi	r24, 0xFF	; 255
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	69 f7       	brne	.-38     	; 0x556 <move+0x260>
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	30 e0       	ldi	r19, 0x00	; 0
				{
					food = random();
				}
				newFood = 1;
			}
            pixels[(*h) - 8] = 64;
 580:	e8 81       	ld	r30, Y
 582:	f9 81       	ldd	r31, Y+1	; 0x01
 584:	38 97       	sbiw	r30, 0x08	; 8
 586:	ee 0f       	add	r30, r30
 588:	ff 1f       	adc	r31, r31
 58a:	e0 0f       	add	r30, r16
 58c:	f1 1f       	adc	r31, r17
 58e:	80 e4       	ldi	r24, 0x40	; 64
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	91 83       	std	Z+1, r25	; 0x01
 594:	80 83       	st	Z, r24

            *h = (*h) - 8;
 596:	88 81       	ld	r24, Y
 598:	99 81       	ldd	r25, Y+1	; 0x01
 59a:	08 97       	sbiw	r24, 0x08	; 8
 59c:	99 83       	std	Y+1, r25	; 0x01
 59e:	88 83       	st	Y, r24

            tempTail = *t;
 5a0:	d7 01       	movw	r26, r14
 5a2:	ed 91       	ld	r30, X+
 5a4:	fc 91       	ld	r31, X
 5a6:	11 97       	sbiw	r26, 0x01	; 1
            if(!newFood)
 5a8:	23 2b       	or	r18, r19
 5aa:	71 f4       	brne	.+28     	; 0x5c8 <move+0x2d2>
			{
				*t = pixels[*t];
 5ac:	ee 0f       	add	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	e0 0f       	add	r30, r16
 5b2:	f1 1f       	adc	r31, r17
 5b4:	80 81       	ld	r24, Z
 5b6:	91 81       	ldd	r25, Z+1	; 0x01
 5b8:	8d 93       	st	X+, r24
 5ba:	9c 93       	st	X, r25
				pixels[tempTail] = -1;
 5bc:	8f ef       	ldi	r24, 0xFF	; 255
 5be:	9f ef       	ldi	r25, 0xFF	; 255
 5c0:	91 83       	std	Z+1, r25	; 0x01
 5c2:	80 83       	st	Z, r24
 5c4:	01 c0       	rjmp	.+2      	; 0x5c8 <move+0x2d2>
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <move+0x2d0>
			{
				
			}
		}
    }
	pixels[food] = 65;
 5c8:	e0 91 6c 00 	lds	r30, 0x006C
 5cc:	f0 91 6d 00 	lds	r31, 0x006D
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31
 5d4:	e0 0f       	add	r30, r16
 5d6:	f1 1f       	adc	r31, r17
 5d8:	81 e4       	ldi	r24, 0x41	; 65
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	91 83       	std	Z+1, r25	; 0x01
 5de:	80 83       	st	Z, r24
}
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	1f 91       	pop	r17
 5e6:	0f 91       	pop	r16
 5e8:	ff 90       	pop	r15
 5ea:	ef 90       	pop	r14
 5ec:	08 95       	ret

000005ee <__vector_11>:
		POV(snake);
	}
}

ISR(TIMER0_OVF_vect)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	0f b6       	in	r0, 0x3f	; 63
 5f4:	0f 92       	push	r0
 5f6:	11 24       	eor	r1, r1
 5f8:	2f 93       	push	r18
 5fa:	3f 93       	push	r19
 5fc:	4f 93       	push	r20
 5fe:	5f 93       	push	r21
 600:	6f 93       	push	r22
 602:	7f 93       	push	r23
 604:	8f 93       	push	r24
 606:	9f 93       	push	r25
 608:	af 93       	push	r26
 60a:	bf 93       	push	r27
 60c:	ef 93       	push	r30
 60e:	ff 93       	push	r31
	count++;
 610:	80 91 68 00 	lds	r24, 0x0068
 614:	90 91 69 00 	lds	r25, 0x0069
 618:	01 96       	adiw	r24, 0x01	; 1
 61a:	90 93 69 00 	sts	0x0069, r25
 61e:	80 93 68 00 	sts	0x0068, r24
	
	if(!(count / 5) && !end)
 622:	05 97       	sbiw	r24, 0x05	; 5
 624:	78 f5       	brcc	.+94     	; 0x684 <__vector_11+0x96>
 626:	80 91 6a 00 	lds	r24, 0x006A
 62a:	90 91 6b 00 	lds	r25, 0x006B
 62e:	89 2b       	or	r24, r25
 630:	49 f5       	brne	.+82     	; 0x684 <__vector_11+0x96>
	{
		if(adc_read(0) < 100)
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	0e 94 03 01 	call	0x206	; 0x206 <adc_read>
 638:	84 36       	cpi	r24, 0x64	; 100
 63a:	91 05       	cpc	r25, r1
 63c:	20 f4       	brcc	.+8      	; 0x646 <__vector_11+0x58>
		{
			changeDirection(&direction, 'u');
 63e:	8e ee       	ldi	r24, 0xEE	; 238
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	65 e7       	ldi	r22, 0x75	; 117
 644:	1d c0       	rjmp	.+58     	; 0x680 <__vector_11+0x92>
		}
		else if(adc_read(0) > 923)
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0e 94 03 01 	call	0x206	; 0x206 <adc_read>
 64c:	8c 59       	subi	r24, 0x9C	; 156
 64e:	93 40       	sbci	r25, 0x03	; 3
 650:	20 f0       	brcs	.+8      	; 0x65a <__vector_11+0x6c>
		{
			changeDirection(&direction, 'd');
 652:	8e ee       	ldi	r24, 0xEE	; 238
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	64 e6       	ldi	r22, 0x64	; 100
 658:	13 c0       	rjmp	.+38     	; 0x680 <__vector_11+0x92>
		}
		else if(adc_read(1) < 100)
 65a:	81 e0       	ldi	r24, 0x01	; 1
 65c:	0e 94 03 01 	call	0x206	; 0x206 <adc_read>
 660:	84 36       	cpi	r24, 0x64	; 100
 662:	91 05       	cpc	r25, r1
 664:	20 f4       	brcc	.+8      	; 0x66e <__vector_11+0x80>
		{
			changeDirection(&direction, 'r');
 666:	8e ee       	ldi	r24, 0xEE	; 238
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	62 e7       	ldi	r22, 0x72	; 114
 66c:	09 c0       	rjmp	.+18     	; 0x680 <__vector_11+0x92>
		}
		else if(adc_read(1) > 923)
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	0e 94 03 01 	call	0x206	; 0x206 <adc_read>
 674:	8c 59       	subi	r24, 0x9C	; 156
 676:	93 40       	sbci	r25, 0x03	; 3
 678:	28 f0       	brcs	.+10     	; 0x684 <__vector_11+0x96>
		{
			changeDirection(&direction, 'l');
 67a:	8e ee       	ldi	r24, 0xEE	; 238
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	6c e6       	ldi	r22, 0x6C	; 108
 680:	0e 94 49 00 	call	0x92	; 0x92 <changeDirection>
		}
	}
	
	if(count == 7812 && !end)
 684:	80 91 68 00 	lds	r24, 0x0068
 688:	90 91 69 00 	lds	r25, 0x0069
 68c:	84 58       	subi	r24, 0x84	; 132
 68e:	9e 41       	sbci	r25, 0x1E	; 30
 690:	b1 f4       	brne	.+44     	; 0x6be <__vector_11+0xd0>
 692:	80 91 6a 00 	lds	r24, 0x006A
 696:	90 91 6b 00 	lds	r25, 0x006B
 69a:	89 2b       	or	r24, r25
 69c:	81 f4       	brne	.+32     	; 0x6be <__vector_11+0xd0>
	{
		move(snake, direction, &head, &tail);
 69e:	60 91 ee 00 	lds	r22, 0x00EE
 6a2:	70 91 ef 00 	lds	r23, 0x00EF
 6a6:	8e e6       	ldi	r24, 0x6E	; 110
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	42 ef       	ldi	r20, 0xF2	; 242
 6ac:	50 e0       	ldi	r21, 0x00	; 0
 6ae:	20 ef       	ldi	r18, 0xF0	; 240
 6b0:	30 e0       	ldi	r19, 0x00	; 0
 6b2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <move>
		count = 0;
 6b6:	10 92 69 00 	sts	0x0069, r1
 6ba:	10 92 68 00 	sts	0x0068, r1
	}
 6be:	ff 91       	pop	r31
 6c0:	ef 91       	pop	r30
 6c2:	bf 91       	pop	r27
 6c4:	af 91       	pop	r26
 6c6:	9f 91       	pop	r25
 6c8:	8f 91       	pop	r24
 6ca:	7f 91       	pop	r23
 6cc:	6f 91       	pop	r22
 6ce:	5f 91       	pop	r21
 6d0:	4f 91       	pop	r20
 6d2:	3f 91       	pop	r19
 6d4:	2f 91       	pop	r18
 6d6:	0f 90       	pop	r0
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	0f 90       	pop	r0
 6dc:	1f 90       	pop	r1
 6de:	18 95       	reti

000006e0 <__divmodhi4>:
 6e0:	97 fb       	bst	r25, 7
 6e2:	09 2e       	mov	r0, r25
 6e4:	07 26       	eor	r0, r23
 6e6:	0a d0       	rcall	.+20     	; 0x6fc <__divmodhi4_neg1>
 6e8:	77 fd       	sbrc	r23, 7
 6ea:	04 d0       	rcall	.+8      	; 0x6f4 <__divmodhi4_neg2>
 6ec:	0c d0       	rcall	.+24     	; 0x706 <__udivmodhi4>
 6ee:	06 d0       	rcall	.+12     	; 0x6fc <__divmodhi4_neg1>
 6f0:	00 20       	and	r0, r0
 6f2:	1a f4       	brpl	.+6      	; 0x6fa <__divmodhi4_exit>

000006f4 <__divmodhi4_neg2>:
 6f4:	70 95       	com	r23
 6f6:	61 95       	neg	r22
 6f8:	7f 4f       	sbci	r23, 0xFF	; 255

000006fa <__divmodhi4_exit>:
 6fa:	08 95       	ret

000006fc <__divmodhi4_neg1>:
 6fc:	f6 f7       	brtc	.-4      	; 0x6fa <__divmodhi4_exit>
 6fe:	90 95       	com	r25
 700:	81 95       	neg	r24
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	08 95       	ret

00000706 <__udivmodhi4>:
 706:	aa 1b       	sub	r26, r26
 708:	bb 1b       	sub	r27, r27
 70a:	51 e1       	ldi	r21, 0x11	; 17
 70c:	07 c0       	rjmp	.+14     	; 0x71c <__udivmodhi4_ep>

0000070e <__udivmodhi4_loop>:
 70e:	aa 1f       	adc	r26, r26
 710:	bb 1f       	adc	r27, r27
 712:	a6 17       	cp	r26, r22
 714:	b7 07       	cpc	r27, r23
 716:	10 f0       	brcs	.+4      	; 0x71c <__udivmodhi4_ep>
 718:	a6 1b       	sub	r26, r22
 71a:	b7 0b       	sbc	r27, r23

0000071c <__udivmodhi4_ep>:
 71c:	88 1f       	adc	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	5a 95       	dec	r21
 722:	a9 f7       	brne	.-22     	; 0x70e <__udivmodhi4_loop>
 724:	80 95       	com	r24
 726:	90 95       	com	r25
 728:	bc 01       	movw	r22, r24
 72a:	cd 01       	movw	r24, r26
 72c:	08 95       	ret

0000072e <do_rand>:
 72e:	a0 e0       	ldi	r26, 0x00	; 0
 730:	b0 e0       	ldi	r27, 0x00	; 0
 732:	ed e9       	ldi	r30, 0x9D	; 157
 734:	f3 e0       	ldi	r31, 0x03	; 3
 736:	0c 94 9b 04 	jmp	0x936	; 0x936 <__prologue_saves__+0x10>
 73a:	ec 01       	movw	r28, r24
 73c:	a8 80       	ld	r10, Y
 73e:	b9 80       	ldd	r11, Y+1	; 0x01
 740:	ca 80       	ldd	r12, Y+2	; 0x02
 742:	db 80       	ldd	r13, Y+3	; 0x03
 744:	a1 14       	cp	r10, r1
 746:	b1 04       	cpc	r11, r1
 748:	c1 04       	cpc	r12, r1
 74a:	d1 04       	cpc	r13, r1
 74c:	41 f4       	brne	.+16     	; 0x75e <do_rand+0x30>
 74e:	84 e2       	ldi	r24, 0x24	; 36
 750:	a8 2e       	mov	r10, r24
 752:	89 ed       	ldi	r24, 0xD9	; 217
 754:	b8 2e       	mov	r11, r24
 756:	8b e5       	ldi	r24, 0x5B	; 91
 758:	c8 2e       	mov	r12, r24
 75a:	87 e0       	ldi	r24, 0x07	; 7
 75c:	d8 2e       	mov	r13, r24
 75e:	c6 01       	movw	r24, r12
 760:	b5 01       	movw	r22, r10
 762:	2d e1       	ldi	r18, 0x1D	; 29
 764:	33 ef       	ldi	r19, 0xF3	; 243
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divmodsi4>
 76e:	27 ea       	ldi	r18, 0xA7	; 167
 770:	31 e4       	ldi	r19, 0x41	; 65
 772:	40 e0       	ldi	r20, 0x00	; 0
 774:	50 e0       	ldi	r21, 0x00	; 0
 776:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__mulsi3>
 77a:	7b 01       	movw	r14, r22
 77c:	8c 01       	movw	r16, r24
 77e:	c6 01       	movw	r24, r12
 780:	b5 01       	movw	r22, r10
 782:	2d e1       	ldi	r18, 0x1D	; 29
 784:	33 ef       	ldi	r19, 0xF3	; 243
 786:	41 e0       	ldi	r20, 0x01	; 1
 788:	50 e0       	ldi	r21, 0x00	; 0
 78a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divmodsi4>
 78e:	ca 01       	movw	r24, r20
 790:	b9 01       	movw	r22, r18
 792:	2c ee       	ldi	r18, 0xEC	; 236
 794:	34 ef       	ldi	r19, 0xF4	; 244
 796:	4f ef       	ldi	r20, 0xFF	; 255
 798:	5f ef       	ldi	r21, 0xFF	; 255
 79a:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__mulsi3>
 79e:	6e 0d       	add	r22, r14
 7a0:	7f 1d       	adc	r23, r15
 7a2:	80 1f       	adc	r24, r16
 7a4:	91 1f       	adc	r25, r17
 7a6:	97 ff       	sbrs	r25, 7
 7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <do_rand+0x84>
 7aa:	61 50       	subi	r22, 0x01	; 1
 7ac:	70 40       	sbci	r23, 0x00	; 0
 7ae:	80 40       	sbci	r24, 0x00	; 0
 7b0:	90 48       	sbci	r25, 0x80	; 128
 7b2:	68 83       	st	Y, r22
 7b4:	79 83       	std	Y+1, r23	; 0x01
 7b6:	8a 83       	std	Y+2, r24	; 0x02
 7b8:	9b 83       	std	Y+3, r25	; 0x03
 7ba:	9b 01       	movw	r18, r22
 7bc:	3f 77       	andi	r19, 0x7F	; 127
 7be:	c9 01       	movw	r24, r18
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
 7c4:	ea e0       	ldi	r30, 0x0A	; 10
 7c6:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__epilogue_restores__+0x10>

000007ca <rand_r>:
 7ca:	0e 94 97 03 	call	0x72e	; 0x72e <do_rand>
 7ce:	08 95       	ret

000007d0 <rand>:
 7d0:	80 e6       	ldi	r24, 0x60	; 96
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 97 03 	call	0x72e	; 0x72e <do_rand>
 7d8:	08 95       	ret

000007da <srand>:
 7da:	a0 e0       	ldi	r26, 0x00	; 0
 7dc:	b0 e0       	ldi	r27, 0x00	; 0
 7de:	80 93 60 00 	sts	0x0060, r24
 7e2:	90 93 61 00 	sts	0x0061, r25
 7e6:	a0 93 62 00 	sts	0x0062, r26
 7ea:	b0 93 63 00 	sts	0x0063, r27
 7ee:	08 95       	ret

000007f0 <do_random>:
 7f0:	a0 e0       	ldi	r26, 0x00	; 0
 7f2:	b0 e0       	ldi	r27, 0x00	; 0
 7f4:	ee ef       	ldi	r30, 0xFE	; 254
 7f6:	f3 e0       	ldi	r31, 0x03	; 3
 7f8:	0c 94 9b 04 	jmp	0x936	; 0x936 <__prologue_saves__+0x10>
 7fc:	ec 01       	movw	r28, r24
 7fe:	a8 80       	ld	r10, Y
 800:	b9 80       	ldd	r11, Y+1	; 0x01
 802:	ca 80       	ldd	r12, Y+2	; 0x02
 804:	db 80       	ldd	r13, Y+3	; 0x03
 806:	a1 14       	cp	r10, r1
 808:	b1 04       	cpc	r11, r1
 80a:	c1 04       	cpc	r12, r1
 80c:	d1 04       	cpc	r13, r1
 80e:	41 f4       	brne	.+16     	; 0x820 <do_random+0x30>
 810:	84 e2       	ldi	r24, 0x24	; 36
 812:	a8 2e       	mov	r10, r24
 814:	89 ed       	ldi	r24, 0xD9	; 217
 816:	b8 2e       	mov	r11, r24
 818:	8b e5       	ldi	r24, 0x5B	; 91
 81a:	c8 2e       	mov	r12, r24
 81c:	87 e0       	ldi	r24, 0x07	; 7
 81e:	d8 2e       	mov	r13, r24
 820:	c6 01       	movw	r24, r12
 822:	b5 01       	movw	r22, r10
 824:	2d e1       	ldi	r18, 0x1D	; 29
 826:	33 ef       	ldi	r19, 0xF3	; 243
 828:	41 e0       	ldi	r20, 0x01	; 1
 82a:	50 e0       	ldi	r21, 0x00	; 0
 82c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divmodsi4>
 830:	27 ea       	ldi	r18, 0xA7	; 167
 832:	31 e4       	ldi	r19, 0x41	; 65
 834:	40 e0       	ldi	r20, 0x00	; 0
 836:	50 e0       	ldi	r21, 0x00	; 0
 838:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__mulsi3>
 83c:	7b 01       	movw	r14, r22
 83e:	8c 01       	movw	r16, r24
 840:	c6 01       	movw	r24, r12
 842:	b5 01       	movw	r22, r10
 844:	2d e1       	ldi	r18, 0x1D	; 29
 846:	33 ef       	ldi	r19, 0xF3	; 243
 848:	41 e0       	ldi	r20, 0x01	; 1
 84a:	50 e0       	ldi	r21, 0x00	; 0
 84c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__divmodsi4>
 850:	ca 01       	movw	r24, r20
 852:	b9 01       	movw	r22, r18
 854:	2c ee       	ldi	r18, 0xEC	; 236
 856:	34 ef       	ldi	r19, 0xF4	; 244
 858:	4f ef       	ldi	r20, 0xFF	; 255
 85a:	5f ef       	ldi	r21, 0xFF	; 255
 85c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__mulsi3>
 860:	6e 0d       	add	r22, r14
 862:	7f 1d       	adc	r23, r15
 864:	80 1f       	adc	r24, r16
 866:	91 1f       	adc	r25, r17
 868:	97 ff       	sbrs	r25, 7
 86a:	04 c0       	rjmp	.+8      	; 0x874 <__stack+0x15>
 86c:	61 50       	subi	r22, 0x01	; 1
 86e:	70 40       	sbci	r23, 0x00	; 0
 870:	80 40       	sbci	r24, 0x00	; 0
 872:	90 48       	sbci	r25, 0x80	; 128
 874:	68 83       	st	Y, r22
 876:	79 83       	std	Y+1, r23	; 0x01
 878:	8a 83       	std	Y+2, r24	; 0x02
 87a:	9b 83       	std	Y+3, r25	; 0x03
 87c:	9b 01       	movw	r18, r22
 87e:	ac 01       	movw	r20, r24
 880:	5f 77       	andi	r21, 0x7F	; 127
 882:	b9 01       	movw	r22, r18
 884:	ca 01       	movw	r24, r20
 886:	cd b7       	in	r28, 0x3d	; 61
 888:	de b7       	in	r29, 0x3e	; 62
 88a:	ea e0       	ldi	r30, 0x0A	; 10
 88c:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__epilogue_restores__+0x10>

00000890 <random_r>:
 890:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <do_random>
 894:	08 95       	ret

00000896 <random>:
 896:	84 e6       	ldi	r24, 0x64	; 100
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <do_random>
 89e:	08 95       	ret

000008a0 <srandom>:
 8a0:	60 93 64 00 	sts	0x0064, r22
 8a4:	70 93 65 00 	sts	0x0065, r23
 8a8:	80 93 66 00 	sts	0x0066, r24
 8ac:	90 93 67 00 	sts	0x0067, r25
 8b0:	08 95       	ret

000008b2 <__mulsi3>:
 8b2:	62 9f       	mul	r22, r18
 8b4:	d0 01       	movw	r26, r0
 8b6:	73 9f       	mul	r23, r19
 8b8:	f0 01       	movw	r30, r0
 8ba:	82 9f       	mul	r24, r18
 8bc:	e0 0d       	add	r30, r0
 8be:	f1 1d       	adc	r31, r1
 8c0:	64 9f       	mul	r22, r20
 8c2:	e0 0d       	add	r30, r0
 8c4:	f1 1d       	adc	r31, r1
 8c6:	92 9f       	mul	r25, r18
 8c8:	f0 0d       	add	r31, r0
 8ca:	83 9f       	mul	r24, r19
 8cc:	f0 0d       	add	r31, r0
 8ce:	74 9f       	mul	r23, r20
 8d0:	f0 0d       	add	r31, r0
 8d2:	65 9f       	mul	r22, r21
 8d4:	f0 0d       	add	r31, r0
 8d6:	99 27       	eor	r25, r25
 8d8:	72 9f       	mul	r23, r18
 8da:	b0 0d       	add	r27, r0
 8dc:	e1 1d       	adc	r30, r1
 8de:	f9 1f       	adc	r31, r25
 8e0:	63 9f       	mul	r22, r19
 8e2:	b0 0d       	add	r27, r0
 8e4:	e1 1d       	adc	r30, r1
 8e6:	f9 1f       	adc	r31, r25
 8e8:	bd 01       	movw	r22, r26
 8ea:	cf 01       	movw	r24, r30
 8ec:	11 24       	eor	r1, r1
 8ee:	08 95       	ret

000008f0 <__divmodsi4>:
 8f0:	97 fb       	bst	r25, 7
 8f2:	09 2e       	mov	r0, r25
 8f4:	05 26       	eor	r0, r21
 8f6:	0e d0       	rcall	.+28     	; 0x914 <__divmodsi4_neg1>
 8f8:	57 fd       	sbrc	r21, 7
 8fa:	04 d0       	rcall	.+8      	; 0x904 <__divmodsi4_neg2>
 8fc:	4b d0       	rcall	.+150    	; 0x994 <__udivmodsi4>
 8fe:	0a d0       	rcall	.+20     	; 0x914 <__divmodsi4_neg1>
 900:	00 1c       	adc	r0, r0
 902:	38 f4       	brcc	.+14     	; 0x912 <__divmodsi4_exit>

00000904 <__divmodsi4_neg2>:
 904:	50 95       	com	r21
 906:	40 95       	com	r20
 908:	30 95       	com	r19
 90a:	21 95       	neg	r18
 90c:	3f 4f       	sbci	r19, 0xFF	; 255
 90e:	4f 4f       	sbci	r20, 0xFF	; 255
 910:	5f 4f       	sbci	r21, 0xFF	; 255

00000912 <__divmodsi4_exit>:
 912:	08 95       	ret

00000914 <__divmodsi4_neg1>:
 914:	f6 f7       	brtc	.-4      	; 0x912 <__divmodsi4_exit>
 916:	90 95       	com	r25
 918:	80 95       	com	r24
 91a:	70 95       	com	r23
 91c:	61 95       	neg	r22
 91e:	7f 4f       	sbci	r23, 0xFF	; 255
 920:	8f 4f       	sbci	r24, 0xFF	; 255
 922:	9f 4f       	sbci	r25, 0xFF	; 255
 924:	08 95       	ret

00000926 <__prologue_saves__>:
 926:	2f 92       	push	r2
 928:	3f 92       	push	r3
 92a:	4f 92       	push	r4
 92c:	5f 92       	push	r5
 92e:	6f 92       	push	r6
 930:	7f 92       	push	r7
 932:	8f 92       	push	r8
 934:	9f 92       	push	r9
 936:	af 92       	push	r10
 938:	bf 92       	push	r11
 93a:	cf 92       	push	r12
 93c:	df 92       	push	r13
 93e:	ef 92       	push	r14
 940:	ff 92       	push	r15
 942:	0f 93       	push	r16
 944:	1f 93       	push	r17
 946:	cf 93       	push	r28
 948:	df 93       	push	r29
 94a:	cd b7       	in	r28, 0x3d	; 61
 94c:	de b7       	in	r29, 0x3e	; 62
 94e:	ca 1b       	sub	r28, r26
 950:	db 0b       	sbc	r29, r27
 952:	0f b6       	in	r0, 0x3f	; 63
 954:	f8 94       	cli
 956:	de bf       	out	0x3e, r29	; 62
 958:	0f be       	out	0x3f, r0	; 63
 95a:	cd bf       	out	0x3d, r28	; 61
 95c:	09 94       	ijmp

0000095e <__epilogue_restores__>:
 95e:	2a 88       	ldd	r2, Y+18	; 0x12
 960:	39 88       	ldd	r3, Y+17	; 0x11
 962:	48 88       	ldd	r4, Y+16	; 0x10
 964:	5f 84       	ldd	r5, Y+15	; 0x0f
 966:	6e 84       	ldd	r6, Y+14	; 0x0e
 968:	7d 84       	ldd	r7, Y+13	; 0x0d
 96a:	8c 84       	ldd	r8, Y+12	; 0x0c
 96c:	9b 84       	ldd	r9, Y+11	; 0x0b
 96e:	aa 84       	ldd	r10, Y+10	; 0x0a
 970:	b9 84       	ldd	r11, Y+9	; 0x09
 972:	c8 84       	ldd	r12, Y+8	; 0x08
 974:	df 80       	ldd	r13, Y+7	; 0x07
 976:	ee 80       	ldd	r14, Y+6	; 0x06
 978:	fd 80       	ldd	r15, Y+5	; 0x05
 97a:	0c 81       	ldd	r16, Y+4	; 0x04
 97c:	1b 81       	ldd	r17, Y+3	; 0x03
 97e:	aa 81       	ldd	r26, Y+2	; 0x02
 980:	b9 81       	ldd	r27, Y+1	; 0x01
 982:	ce 0f       	add	r28, r30
 984:	d1 1d       	adc	r29, r1
 986:	0f b6       	in	r0, 0x3f	; 63
 988:	f8 94       	cli
 98a:	de bf       	out	0x3e, r29	; 62
 98c:	0f be       	out	0x3f, r0	; 63
 98e:	cd bf       	out	0x3d, r28	; 61
 990:	ed 01       	movw	r28, r26
 992:	08 95       	ret

00000994 <__udivmodsi4>:
 994:	a1 e2       	ldi	r26, 0x21	; 33
 996:	1a 2e       	mov	r1, r26
 998:	aa 1b       	sub	r26, r26
 99a:	bb 1b       	sub	r27, r27
 99c:	fd 01       	movw	r30, r26
 99e:	0d c0       	rjmp	.+26     	; 0x9ba <__udivmodsi4_ep>

000009a0 <__udivmodsi4_loop>:
 9a0:	aa 1f       	adc	r26, r26
 9a2:	bb 1f       	adc	r27, r27
 9a4:	ee 1f       	adc	r30, r30
 9a6:	ff 1f       	adc	r31, r31
 9a8:	a2 17       	cp	r26, r18
 9aa:	b3 07       	cpc	r27, r19
 9ac:	e4 07       	cpc	r30, r20
 9ae:	f5 07       	cpc	r31, r21
 9b0:	20 f0       	brcs	.+8      	; 0x9ba <__udivmodsi4_ep>
 9b2:	a2 1b       	sub	r26, r18
 9b4:	b3 0b       	sbc	r27, r19
 9b6:	e4 0b       	sbc	r30, r20
 9b8:	f5 0b       	sbc	r31, r21

000009ba <__udivmodsi4_ep>:
 9ba:	66 1f       	adc	r22, r22
 9bc:	77 1f       	adc	r23, r23
 9be:	88 1f       	adc	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	1a 94       	dec	r1
 9c4:	69 f7       	brne	.-38     	; 0x9a0 <__udivmodsi4_loop>
 9c6:	60 95       	com	r22
 9c8:	70 95       	com	r23
 9ca:	80 95       	com	r24
 9cc:	90 95       	com	r25
 9ce:	9b 01       	movw	r18, r22
 9d0:	ac 01       	movw	r20, r24
 9d2:	bd 01       	movw	r22, r26
 9d4:	cf 01       	movw	r24, r30
 9d6:	08 95       	ret

000009d8 <_exit>:
 9d8:	f8 94       	cli

000009da <__stop_program>:
 9da:	ff cf       	rjmp	.-2      	; 0x9da <__stop_program>
